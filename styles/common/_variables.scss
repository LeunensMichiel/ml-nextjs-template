// General variables

// Media-query breakpoints
$grid-breakpoints: (
  xs: 0,
  sm: 640px,
  md: 768px,
  lg: 1024px,
  xl: 1280px,
  xxl: 1536px,
);

$grid-breakpoints-desktop-first: (
  xs: 639.98px,
  sm: 767.98px,
  md: 1023.98px,
  lg: 1279.98px,
  xl: 1535.98px,
);

$max-container-sizes: 600px, 720px, 960px, 1140px, 1320px;

// Z-index
$z-negative: -1;
$z-low: 10;
$z-mid: 100;
$z-high: 1000;
$z-ultra: 10000;
$z-extreme: 9999999999;

// Border-radii
$border-radius: 0.25rem;
$border-radius-lg: 4rem;

// Drop-and-box-shadows
// https://shadows.brumm.af/
$box-shadow-xs: 0 1.3px 10px rgba(0, 0, 0, 0.02),
  0 10px 80px rgba(0, 0, 0, 0.04);
$box-shadow-sm: 0 9px 10px rgba(0, 0, 0, 0.03), 0 72px 80px rgba(0, 0, 0, 0.06);
$box-shadow-md: 0 12.5px 10px rgba(0, 0, 0, 0.035),
  0 100px 80px rgba(0, 0, 0, 0.07);
$box-shadow-lg: 0 6.4px 10px rgba(0, 0, 0, 0.045),
  0 51px 80px rgba(0, 0, 0, 0.09);
$box-shadow-xl: 0 9.8px 16.8px rgba(0, 0, 0, 0.055),
  0 78px 134px rgba(0, 0, 0, 0.11);

$drop-shadow-xs: drop-shadow(0 1.3px 10px rgba(0, 0, 0, 0.02))
  drop-shadow(0 10px 80px rgba(0, 0, 0, 0.04));
$drop-shadow-sm: drop-shadow(0 9px 10px rgba(0, 0, 0, 0.03))
  drop-shadow(0 72px 80px rgba(0, 0, 0, 0.06));
$drop-shadow-md: drop-shadow(0 12.5px 10px rgba(0, 0, 0, 0.035))
  drop-shadow(0 100px 80px rgba(0, 0, 0, 0.07));
$drop-shadow-lg: drop-shadow(0 6.4px 10px rgba(0, 0, 0, 0.045))
  drop-shadow(0 51px 80px rgba(0, 0, 0, 0.09));
$drop-shadow-xl: drop-shadow(0 9.8px 16.8px rgba(0, 0, 0, 0.055))
  drop-shadow(0 78px 134px rgba(0, 0, 0, 0.11));

@mixin drop-shadow-colored($size, $color) {
  @if $size == xs {
    filter: drop-shadow(0 0px 3.6px $color);
  }
  @if $size == sm {
    filter: drop-shadow(0 1.4px 3.6px $color);
  }
  @if $size == md {
    filter: drop-shadow(0 2.5px 3.6px $color);
  }
  @if $size == lg {
    filter: drop-shadow(0 4.5px 3.6px $color);
  }
  @if $size == xl {
    filter: drop-shadow(0 4px 10.5px $color);
  }
}

// Transitions
$transition-timing: cubic-bezier(0.16, 1, 0.3, 1);
$transition-duration: 500ms;

@mixin transition($props...) {
  $result: ();

  @for $i from 1 through length($props) {
    $prop: nth($props, $i);
    $result: append($result, $prop);
    $result: append($result, $transition-timing $transition-duration);

    @if $i != length($props) {
      $result: append(
        $result,
        unquote(
          $string: ',',
        )
      );
    }
  }

  transition: $result;
}
